{"ast":null,"code":"(function (window) {\n  var FUNCTION = 'function';\n  var UNDEFINED = 'undefined';\n  var subscribers = [];\n  var isWeb = typeof window !== UNDEFINED && !window.AndroidBridge && !window.webkit;\n  var eventType = isWeb ? 'message' : 'VKWebAppEvent';\n\n  if (typeof window !== UNDEFINED) {\n    //polyfill\n    if (!window.CustomEvent) {\n      (function () {\n        function CustomEvent(event, params) {\n          params = params || {\n            bubbles: false,\n            cancelable: false,\n            detail: undefined\n          };\n          var evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n          return evt;\n        }\n\n        ;\n        CustomEvent.prototype = window.Event.prototype;\n        window.CustomEvent = CustomEvent;\n      })();\n    }\n\n    window.addEventListener(eventType, function () {\n      var args = Array.prototype.slice.call(arguments);\n\n      var _subscribers = subscribers.slice();\n\n      if (isWeb) {\n        _subscribers.forEach(function (fn) {\n          fn({\n            detail: args[0].data\n          });\n        });\n      } else {\n        _subscribers.forEach(function (fn) {\n          fn.apply(null, args);\n        });\n      }\n    });\n  }\n\n  module.exports = {\n    /**\n     * Sends a message to native client\n     *\n     * @example\n     * message.send('VKWebAppInit');\n     *\n     * @param {String} handler Message type\n     * @param {Object} params Message data\n     * @returns {void}\n     */\n    send: function send(handler, params) {\n      if (!params) {\n        params = {};\n      }\n\n      var isClient = typeof window !== UNDEFINED;\n      var androidBridge = isClient && window.AndroidBridge;\n      var iosBridge = isClient && window.webkit && window.webkit.messageHandlers;\n      var isDesktop = !androidBridge && !iosBridge;\n\n      if (androidBridge && typeof androidBridge[handler] == FUNCTION) {\n        androidBridge[handler](JSON.stringify(params));\n      }\n\n      if (iosBridge && iosBridge[handler] && typeof iosBridge[handler].postMessage == FUNCTION) {\n        iosBridge[handler].postMessage(params);\n      }\n\n      if (isDesktop) {\n        parent.postMessage({\n          handler: handler,\n          params: params,\n          type: 'vk-connect'\n        }, '*');\n      }\n    },\n\n    /**\n     * Subscribe on VKWebAppEvent\n     *\n     * @param {Function} fn Event handler\n     * @returns {void}\n     */\n    subscribe: function subscribe(fn) {\n      subscribers.push(fn);\n    },\n\n    /**\n     * Unsubscribe on VKWebAppEvent\n     *\n     * @param {Function} fn Event handler\n     * @returns {void}\n     */\n    unsubscribe: function unsubscribe(fn) {\n      var index = subscribers.indexOf(fn);\n\n      if (index > -1) {\n        subscribers.splice(index, 1);\n      }\n    },\n\n    /**\n     * Checks if native client supports nandler\n     *\n     * @param {String} handler Handler name\n     * @returns {boolean}\n     */\n    supports: function supports(handler) {\n      var isClient = typeof window !== UNDEFINED;\n      var androidBridge = isClient && window.AndroidBridge;\n      var iosBridge = isClient && window.webkit && window.webkit.messageHandlers;\n      var desktopEvents = [\"VKWebAppGetAuthToken\", \"VKWebAppCallAPIMethod\", \"VKWebAppGetGeodata\", \"VKWebAppGetUserInfo\", \"VKWebAppGetPhoneNumber\", \"VKWebAppGetClientVersion\", \"VKWebAppOpenPayForm\", \"VKWebAppShare\", \"VKWebAppAllowNotifications\", \"VKWebAppDenyNotifications\", \"VKWebAppShowWallPostBox\", \"VKWebAppGetEmail\", \"VKWebAppAllowMessagesFromGroup\", \"VKWebAppJoinGroup\", \"VKWebAppOpenApp\", \"VKWebAppSetLocation\", \"VKWebAppScroll\", \"VKWebAppResizeWindow\"];\n      if (androidBridge && typeof androidBridge[handler] == FUNCTION) return true;\n      if (iosBridge && iosBridge[handler] && typeof iosBridge[handler].postMessage == FUNCTION) return true;\n      if (!iosBridge && !androidBridge && ~desktopEvents.indexOf(handler)) return true;\n      return false;\n    }\n  };\n})(window);","map":null,"metadata":{},"sourceType":"script"}