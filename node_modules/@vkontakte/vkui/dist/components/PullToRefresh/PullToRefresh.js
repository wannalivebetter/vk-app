"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Touch = _interopRequireDefault(require("../Touch/Touch"));

var _FixedLayout = _interopRequireDefault(require("../FixedLayout/FixedLayout"));

var _classNames = _interopRequireDefault(require("../../lib/classNames"));

var _platform = require("../../lib/platform");

var _getClassName = _interopRequireDefault(require("../../helpers/getClassName"));

var _PullToRefreshSpinner = _interopRequireDefault(require("./PullToRefreshSpinner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var baseClassName = (0, _getClassName.default)('PullToRefresh');

function cancelEvent(event) {
  if (!event) return false;

  while (event.originalEvent) {
    event = event.originalEvent;
  }

  if (event.preventDefault) event.preventDefault();
  if (event.stopPropagation) event.stopPropagation();
  if (event.stopImmediatePropagation) event.stopImmediatePropagation();
  event.cancelBubble = true;
  event.returnValue = false;
  return false;
}

var PullToRefresh =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(PullToRefresh, _PureComponent);

  function PullToRefresh(props) {
    var _this;

    _classCallCheck(this, PullToRefresh);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PullToRefresh).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchStart", function (e) {
      if (_this.state.refreshing) cancelEvent(e);

      _this.setState({
        touchDown: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onWindowTouchMove", function (e) {
      if (_this.state.refreshing) cancelEvent(e);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchMove", function (e) {
      var isY = e.isY,
          shiftY = e.shiftY;
      var _this$params = _this.params,
          start = _this$params.start,
          max = _this$params.max;
      var pageYOffset = _this.window.pageYOffset;
      var _this$state = _this.state,
          refreshing = _this$state.refreshing,
          watching = _this$state.watching,
          touchDown = _this$state.touchDown;

      if (watching && touchDown) {
        cancelEvent(e);
        var positionMultiplier = _this.params.positionMultiplier;
        var shift = Math.max(0, shiftY - _this.state.touchY);
        var currentY = Math.max(start, Math.min(_this.params.maxY, start + shift * positionMultiplier));
        var progress = currentY > -10 ? Math.abs((currentY + 10) / max) * 80 : 0;

        _this.setState({
          spinnerY: currentY,
          spinnerProgress: Math.min(80, Math.max(0, progress)),
          canRefresh: progress > 80,
          contentShift: (currentY + 10) * 2.3
        });

        if (progress > 85 && !refreshing && _platform.IS_PLATFORM_IOS) {
          _this.runRefreshing();
        }
      } else if (isY && pageYOffset === 0 && shiftY > 0 && !refreshing && touchDown) {
        cancelEvent(e);

        _this.setState({
          watching: true,
          touchY: shiftY,
          spinnerY: start,
          spinnerProgress: 0
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onTouchEnd", function () {
      var _this$state2 = _this.state,
          refreshing = _this$state2.refreshing,
          canRefresh = _this$state2.canRefresh,
          refreshingFinished = _this$state2.refreshingFinished;

      _this.setState({
        watching: false,
        touchDown: false
      }, function () {
        if (canRefresh && !refreshing) {
          _this.runRefreshing();
        } else if (refreshing && refreshingFinished) {
          _this.resetRefreshingState();
        } else {
          _this.setState({
            spinnerY: refreshing ? _this.params.refreshing : _this.params.start,
            spinnerProgress: 0,
            contentShift: 0
          });
        }
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onRefreshingFinish", function () {
      _this.setState({
        refreshingFinished: true
      }, function () {
        !_this.state.touchDown && _this.resetRefreshingState();
      });
    });

    _this.params = {
      start: _platform.IS_PLATFORM_ANDROID ? -40 : -10,
      max: _platform.IS_PLATFORM_ANDROID ? 80 : 50,
      maxY: _platform.IS_PLATFORM_ANDROID ? 80 : 400,
      refreshing: _platform.IS_PLATFORM_ANDROID ? 50 : 36,
      positionMultiplier: _platform.IS_PLATFORM_ANDROID ? 1 : 0.21
    };
    _this.state = {
      watching: false,
      refreshing: false,
      canRefresh: false,
      touchDown: false,
      refreshingFinished: false,
      touchY: 0,
      spinnerY: _this.params.start,
      spinnerProgress: 0,
      contentShift: 0
    };
    _this._contentElement = _react.default.createRef();
    return _this;
  }

  _createClass(PullToRefresh, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.document.addEventListener('touchmove', this.onWindowTouchMove, {
        cancelable: true,
        passive: false
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.document.removeEventListener('touchmove', this.onWindowTouchMove);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (!nextProps.isFetching && this.props.isFetching) {
        this.onRefreshingFinish();
      }
    }
  }, {
    key: "runRefreshing",
    value: function runRefreshing() {
      if (!this.state.refreshing && this.props.onRefresh) {
        this.setState({
          refreshing: true,
          spinnerY: _platform.IS_PLATFORM_ANDROID ? this.params.refreshing : this.state.spinnerY
        });
        this.props.onRefresh();
      }
    }
  }, {
    key: "resetRefreshingState",
    value: function resetRefreshingState() {
      this.setState({
        watching: false,
        canRefresh: false,
        refreshing: false,
        refreshingFinished: false,
        spinnerY: this.params.start,
        spinnerProgress: 0,
        contentShift: 0
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          onRefresh = _this$props.onRefresh,
          isFetching = _this$props.isFetching,
          restProps = _objectWithoutProperties(_this$props, ["children", "className", "onRefresh", "isFetching"]);

      var _this$state3 = this.state,
          watching = _this$state3.watching,
          refreshing = _this$state3.refreshing,
          spinnerY = _this$state3.spinnerY,
          spinnerProgress = _this$state3.spinnerProgress,
          canRefresh = _this$state3.canRefresh,
          touchDown = _this$state3.touchDown,
          contentShift = _this$state3.contentShift;
      return _react.default.createElement(_Touch.default, _extends({
        onStart: this.onTouchStart,
        onMove: this.onTouchMove,
        onEnd: this.onTouchEnd,
        className: (0, _classNames.default)(baseClassName, className, {
          'PullToRefresh--watching': watching,
          'PullToRefresh--refreshing': refreshing
        })
      }, restProps), _react.default.createElement(_FixedLayout.default, {
        className: "PullToRefresh__controls"
      }, _react.default.createElement(_PullToRefreshSpinner.default, {
        style: {
          transform: "translate3d(0, ".concat(spinnerY, "px, 0)"),
          opacity: watching || refreshing || canRefresh ? 1 : 0
        },
        on: refreshing,
        progress: refreshing ? null : spinnerProgress
      })), _react.default.createElement("div", {
        className: "PullToRefresh__content",
        ref: this._contentElement,
        style: {
          transform: refreshing && !touchDown && _platform.IS_PLATFORM_IOS ? "translate3d(0, 100px, 0)" : _platform.IS_PLATFORM_IOS && contentShift ? "translate3d(0, ".concat(contentShift, "px, 0)") : ''
        }
      }, children));
    }
  }, {
    key: "document",
    get: function get() {
      return this.context.document || document;
    }
  }, {
    key: "window",
    get: function get() {
      return this.context.window || window;
    }
  }, {
    key: "scrollTop",
    get: function get() {
      return this.document.scrollingElement.scrollTop;
    }
  }]);

  return PullToRefresh;
}(_react.PureComponent);

exports.default = PullToRefresh;

_defineProperty(PullToRefresh, "propTypes", {
  children: _propTypes.default.element,
  className: _propTypes.default.string,

  /**
   * Будет вызвана для обновления контента
   */
  onRefresh: _propTypes.default.func.isRequired,

  /**
   * Определяет, выполняется ли обновление. Для скрытия спиннера после получения контента необходимо передать `false`
   */
  isFetching: _propTypes.default.bool
});

_defineProperty(PullToRefresh, "contextTypes", {
  window: _propTypes.default.any,
  document: _propTypes.default.any
});
//# sourceMappingURL=PullToRefresh.js.map