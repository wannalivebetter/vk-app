{"version":3,"sources":["../../../src/components/Tabbar/Tabbar.js"],"names":["baseClassName","Tabbar","className","children","shadow","itemsLayout","insets","getItemsLayout","React","Children","count","paddingBottom","isNaN","bottom","propTypes","PropTypes","string","node","bool","oneOf","object","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,aAAa,GAAG,2BAAa,QAAb,CAAtB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAA0D;AAAA,MAAvDC,SAAuD,QAAvDA,SAAuD;AAAA,MAA5CC,QAA4C,QAA5CA,QAA4C;AAAA,MAAlCC,MAAkC,QAAlCA,MAAkC;AAAA,MAA1BC,WAA0B,QAA1BA,WAA0B;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AACvE,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,YAAQF,WAAR;AACE,WAAK,YAAL;AACA,WAAK,UAAL;AACE,eAAOA,WAAP;;AACF;AACE,eAAOG,eAAMC,QAAN,CAAeC,KAAf,CAAqBP,QAArB,IAAiC,CAAjC,GAAqC,UAArC,GAAkD,YAAzD;AALJ;AAOD,GARD;;AAUA,SACE;AAAK,IAAA,SAAS,EAAE,yBAAWH,aAAX,EAA0BE,SAA1B,sBAAkDK,cAAc,EAAhE,GAAsE;AACpF,wBAAkBH;AADkE,KAAtE,CAAhB;AAEI,IAAA,KAAK,EAAE;AAAEO,MAAAA,aAAa,EAAEC,KAAK,CAACN,MAAM,CAACO,MAAR,CAAL,GAAuB,IAAvB,GAA8BP,MAAM,CAACO;AAAtD;AAFX,KAGGV,QAHH,CADF;AAOD,CAlBD;;AAoBAF,MAAM,CAACa,SAAP,GAAmB;AACjBZ,EAAAA,SAAS,EAAEa,mBAAUC,MADJ;AAEjBb,EAAAA,QAAQ,EAAEY,mBAAUE,IAFH;;AAGjB;;;AAGAb,EAAAA,MAAM,EAAEW,mBAAUG,IAND;AAOjBb,EAAAA,WAAW,EAAEU,mBAAUI,KAAV,CAAgB,CAAC,UAAD,EAAa,YAAb,EAA2B,MAA3B,CAAhB,CAPI;;AAQjB;;;AAGAb,EAAAA,MAAM,EAAES,mBAAUK;AAXD,CAAnB;AAcAnB,MAAM,CAACoB,YAAP,GAAsB;AACpBjB,EAAAA,MAAM,EAAE;AADY,CAAtB;;eAIe,yBAAWH,MAAX,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport getClassName from '../../helpers/getClassName';\nimport classNames from '../../lib/classNames';\nimport withInsets from '../../hoc/withInsets';\n\nconst baseClassName = getClassName('Tabbar');\n\nconst Tabbar = ({ className, children, shadow, itemsLayout, insets }) => {\n  const getItemsLayout = () => {\n    switch (itemsLayout) {\n      case 'horizontal':\n      case 'vertical':\n        return itemsLayout;\n      default:\n        return React.Children.count(children) > 2 ? 'vertical' : 'horizontal';\n    }\n  };\n\n  return (\n    <div className={classNames(baseClassName, className, `Tabbar--l-${getItemsLayout()}`, {\n      'Tabbar--shadow': shadow\n    })} style={{ paddingBottom: isNaN(insets.bottom) ? null : insets.bottom }}>\n      {children}\n    </div>\n  );\n};\n\nTabbar.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  /**\n   * * флаг для показа/скрытия верхней тени (Android) или границы (iOS)\n   */\n  shadow: PropTypes.bool,\n  itemsLayout: PropTypes.oneOf(['vertical', 'horizontal', 'auto']),\n  /**\n   * @ignore\n   */\n  insets: PropTypes.object\n};\n\nTabbar.defaultProps = {\n  shadow: true\n};\n\nexport default withInsets(Tabbar);\n"],"file":"Tabbar.js"}