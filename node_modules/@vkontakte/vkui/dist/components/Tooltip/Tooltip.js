"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classNames2 = _interopRequireDefault(require("../../lib/classNames"));

var _getClassName = _interopRequireDefault(require("../../helpers/getClassName"));

var _reactDom = _interopRequireDefault(require("react-dom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isElement = function isElement(element) {
  return _react.default.isValidElement(element);
};

var isDOMTypeElement = function isDOMTypeElement(element) {
  return isElement(element) && typeof element.type === 'string';
};

var baseClassName = (0, _getClassName.default)('Tooltip');

var TooltipPortal =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TooltipPortal, _React$Component);

  function TooltipPortal() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TooltipPortal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TooltipPortal)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      x: 0,
      y: 0
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "fixedPortal", false);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "portalTarget", _this.findPortalTarget());

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getRef", function (el) {
      return _this.el = el;
    });

    return _this;
  }

  _createClass(TooltipPortal, [{
    key: "findPortalTarget",
    value: function findPortalTarget() {
      var target = this.props.target;
      var closestFixed = target.closest('.FixedLayout');
      var closestHeader = target.closest('.PanelHeader__in');
      var closestPanel = this.document.getElementById(this.context.panel).childNodes[0];

      if (closestFixed || closestHeader) {
        this.fixedPortal = true;
      }

      return closestFixed || closestHeader || closestPanel;
    }
  }, {
    key: "getBoundingTargetRect",
    value: function getBoundingTargetRect() {
      var target = this.props.target;
      var targetBounds = target.getBoundingClientRect();
      var portalBounds = this.portalTarget.getBoundingClientRect();
      return {
        width: targetBounds.width,
        height: targetBounds.height,
        x: targetBounds.left - portalBounds.left,
        y: targetBounds.top - portalBounds.top
      };
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.document.removeEventListener('click', this.props.onClose);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          offsetY = _this$props.offsetY,
          offsetX = _this$props.offsetX,
          alignX = _this$props.alignX,
          alignY = _this$props.alignY;
      var coords = this.getBoundingTargetRect();
      this.document.addEventListener('click', this.props.onClose);
      this.setState({
        x: coords.x + offsetX + (alignX === 'right' ? coords.width - this.el.offsetWidth : 0),
        y: coords.y + (alignY === 'top' ? -this.el.offsetHeight - offsetY : coords.height + offsetY)
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props2 = this.props,
          title = _this$props2.title,
          text = _this$props2.text,
          alignX = _this$props2.alignX,
          alignY = _this$props2.alignY,
          cornerOffset = _this$props2.cornerOffset;
      return _reactDom.default.createPortal(_react.default.createElement("div", {
        className: (0, _classNames2.default)(baseClassName, (_classNames = {}, _defineProperty(_classNames, "Tooltip--x-".concat(alignX), true), _defineProperty(_classNames, "Tooltip--y-".concat(alignY), true), _defineProperty(_classNames, 'Tooltip--fixed', this.fixedPortal), _classNames))
      }, _react.default.createElement("div", {
        className: "Tooltip__container",
        style: {
          top: this.state.y,
          left: this.state.x
        },
        ref: this.getRef
      }, _react.default.createElement("div", {
        className: "Tooltip__corner",
        style: _defineProperty({}, alignX, 20 + cornerOffset)
      }), _react.default.createElement("div", {
        className: "Tooltip__content"
      }, title && _react.default.createElement("div", {
        className: "Tooltip__title"
      }, title), text && _react.default.createElement("div", {
        className: "Tooltip__text"
      }, text)))), this.portalTarget);
    }
  }, {
    key: "document",
    get: function get() {
      return this.context.document || document;
    }
  }]);

  return TooltipPortal;
}(_react.default.Component);

_defineProperty(TooltipPortal, "propTypes", {
  target: _propTypes.default.object,
  text: _propTypes.default.node,
  title: _propTypes.default.node,
  alignX: _propTypes.default.oneOf(['left', 'right']),
  alignY: _propTypes.default.oneOf(['top', 'bottom']),
  offsetX: _propTypes.default.number,
  offsetY: _propTypes.default.number,
  cornerOffset: _propTypes.default.number,
  onClose: _propTypes.default.func.isRequired
});

_defineProperty(TooltipPortal, "contextTypes", {
  document: _propTypes.default.any,
  panel: _propTypes.default.string
});

var Tooltip =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(Tooltip, _React$Component2);

  function Tooltip() {
    var _getPrototypeOf3;

    var _this2;

    _classCallCheck(this, Tooltip);

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(Tooltip)).call.apply(_getPrototypeOf3, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "state", {
      ready: false
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "getRef", function (el) {
      return _this2.targetEl = el;
    });

    return _this2;
  }

  _createClass(Tooltip, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.targetEl && this.setState({
        ready: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _React$cloneElement;

      var _this$props3 = this.props,
          children = _this$props3.children,
          isShown = _this$props3.isShown,
          portalProps = _objectWithoutProperties(_this$props3, ["children", "isShown"]);

      var child = _react.default.cloneElement(children, (_React$cloneElement = {}, _defineProperty(_React$cloneElement, isDOMTypeElement(children) ? 'ref' : 'getRootRef', this.getRef), _defineProperty(_React$cloneElement, "key", 'c'), _React$cloneElement));

      if (!isShown || !this.state.ready) {
        return child;
      }

      return [child, _react.default.createElement(TooltipPortal, _extends({}, portalProps, {
        target: this.targetEl,
        key: "t"
      }))];
    }
  }]);

  return Tooltip;
}(_react.default.Component);

exports.default = Tooltip;

_defineProperty(Tooltip, "propTypes", {
  /**
   * **Важно**: если в `children` передан React-компонент, то необходимо убедиться в том, что он поддерживает
   * свойство `getRootRef`, которое должно возвращаться ссылку на корневой DOM-элемент компонента,
   * иначе тултип показан не будет. Если передан React-element, то такой проблемы нет.
   */
  children: _propTypes.default.node.isRequired,

  /**
   * Если передан `false`, то рисуется просто `children`.
   */
  isShown: _propTypes.default.bool.isRequired,

  /**
   * Текст тултипа.
   */
  text: _propTypes.default.node,

  /**
   * Заголовок тултипа.
   */
  title: _propTypes.default.node,

  /**
   * Положение по горизонтали (прижатие к левому или правому краю `children`).
   */
  alignX: _propTypes.default.oneOf(['left', 'right']),

  /**
   * Положение по вертикали (расположение над или под `children`).
   */
  alignY: _propTypes.default.oneOf(['top', 'bottom']),

  /**
   * Сдвиг по горизонтали (относительно портала, в котором рисуется тултип).
   */
  offsetX: _propTypes.default.number,

  /**
   * Сдвиг по вертикали (относительно портала, в котором рисуется тултип).
   */
  offsetY: _propTypes.default.number,

  /**
   * Сдвиг треугольника (относительно ширины тултипа).
   */
  cornerOffset: _propTypes.default.number,

  /**
   * Callback, который вызывается при клике по любому месту в пределах экрана.
   */
  onClose: _propTypes.default.func.isRequired
});

_defineProperty(Tooltip, "defaultProps", {
  offsetX: 0,
  offsetY: 15,
  alignX: 'left',
  alignY: 'bottom',
  cornerOffset: 0,
  isShown: true
});
//# sourceMappingURL=Tooltip.js.map