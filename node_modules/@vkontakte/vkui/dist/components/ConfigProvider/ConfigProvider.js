"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _webview = require("../../lib/webview");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ConfigProvider =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ConfigProvider, _React$Component);

  function ConfigProvider() {
    _classCallCheck(this, ConfigProvider);

    return _possibleConstructorReturn(this, _getPrototypeOf(ConfigProvider).apply(this, arguments));
  }

  _createClass(ConfigProvider, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.document.body.setAttribute('scheme', this.props.scheme);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.scheme !== this.props.scheme) {
        this.document.body.setAttribute('scheme', nextProps.scheme);
      }
    }
  }, {
    key: "getChildContext",
    value: function getChildContext() {
      return {
        isWebView: this.props.isWebView,
        webviewType: this.props.webviewType,
        scheme: this.props.scheme,
        app: this.props.app
      };
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }, {
    key: "document",
    get: function get() {
      return this.context.document || window.document;
    }
  }]);

  return ConfigProvider;
}(_react.default.Component);

exports.default = ConfigProvider;

_defineProperty(ConfigProvider, "childContextTypes", {
  isWebView: _propTypes.default.bool,
  scheme: _propTypes.default.string,
  webviewType: _propTypes.default.oneOf(['vkapps', 'internal']),
  app: _propTypes.default.string
});

_defineProperty(ConfigProvider, "propTypes", {
  scheme: _propTypes.default.string,
  isWebView: _propTypes.default.bool,
  webviewType: _propTypes.default.oneOf(['vkapps', 'internal']),
  app: _propTypes.default.string,
  children: _propTypes.default.node
});

_defineProperty(ConfigProvider, "defaultProps", {
  webviewType: 'internal',
  isWebView: _webview.isWebView,
  scheme: 'client_light'
});

_defineProperty(ConfigProvider, "contextTypes", {
  document: _propTypes.default.object
});
//# sourceMappingURL=ConfigProvider.js.map