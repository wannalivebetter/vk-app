{"version":3,"sources":["../../../src/components/ConfigProvider/ConfigProvider.js"],"names":["ConfigProvider","document","body","setAttribute","props","scheme","nextProps","isWebView","webviewType","app","children","context","window","React","Component","PropTypes","bool","string","oneOf","node","object"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,c;;;;;;;;;;;;;yCA4BG;AACpB,WAAKC,QAAL,CAAcC,IAAd,CAAmBC,YAAnB,CAAgC,QAAhC,EAA0C,KAAKC,KAAL,CAAWC,MAArD;AACD;;;8CAE0BC,S,EAAW;AACpC,UAAIA,SAAS,CAACD,MAAV,KAAqB,KAAKD,KAAL,CAAWC,MAApC,EAA4C;AAC1C,aAAKJ,QAAL,CAAcC,IAAd,CAAmBC,YAAnB,CAAgC,QAAhC,EAA0CG,SAAS,CAACD,MAApD;AACD;AACF;;;sCAEkB;AACjB,aAAO;AACLE,QAAAA,SAAS,EAAE,KAAKH,KAAL,CAAWG,SADjB;AAELC,QAAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWI,WAFnB;AAGLH,QAAAA,MAAM,EAAE,KAAKD,KAAL,CAAWC,MAHd;AAILI,QAAAA,GAAG,EAAE,KAAKL,KAAL,CAAWK;AAJX,OAAP;AAMD;;;6BAES;AACR,aAAO,KAAKL,KAAL,CAAWM,QAAlB;AACD;;;wBAvBe;AAAE,aAAO,KAAKC,OAAL,CAAaV,QAAb,IAAyBW,MAAM,CAACX,QAAvC;AAAkD;;;;EA1B1BY,eAAMC,S;;;;gBAA7Bd,c,uBACQ;AACzBO,EAAAA,SAAS,EAAEQ,mBAAUC,IADI;AAEzBX,EAAAA,MAAM,EAAEU,mBAAUE,MAFO;AAGzBT,EAAAA,WAAW,EAAEO,mBAAUG,KAAV,CAAgB,CAAC,QAAD,EAAW,UAAX,CAAhB,CAHY;AAIzBT,EAAAA,GAAG,EAAEM,mBAAUE;AAJU,C;;gBADRjB,c,eAQA;AACjBK,EAAAA,MAAM,EAAEU,mBAAUE,MADD;AAEjBV,EAAAA,SAAS,EAAEQ,mBAAUC,IAFJ;AAGjBR,EAAAA,WAAW,EAAEO,mBAAUG,KAAV,CAAgB,CAAC,QAAD,EAAW,UAAX,CAAhB,CAHI;AAIjBT,EAAAA,GAAG,EAAEM,mBAAUE,MAJE;AAKjBP,EAAAA,QAAQ,EAAEK,mBAAUI;AALH,C;;gBARAnB,c,kBAgBG;AACpBQ,EAAAA,WAAW,EAAE,UADO;AAEpBD,EAAAA,SAAS,EAATA,kBAFoB;AAGpBF,EAAAA,MAAM,EAAE;AAHY,C;;gBAhBHL,c,kBAsBG;AACpBC,EAAAA,QAAQ,EAAEc,mBAAUK;AADA,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { isWebView } from '../../lib/webview';\n\nexport default class ConfigProvider extends React.Component {\n  static childContextTypes = {\n    isWebView: PropTypes.bool,\n    scheme: PropTypes.string,\n    webviewType: PropTypes.oneOf(['vkapps', 'internal']),\n    app: PropTypes.string\n  };\n\n  static propTypes = {\n    scheme: PropTypes.string,\n    isWebView: PropTypes.bool,\n    webviewType: PropTypes.oneOf(['vkapps', 'internal']),\n    app: PropTypes.string,\n    children: PropTypes.node\n  };\n\n  static defaultProps = {\n    webviewType: 'internal',\n    isWebView,\n    scheme: 'client_light'\n  };\n\n  static contextTypes = {\n    document: PropTypes.object\n  };\n\n  get document () { return this.context.document || window.document; }\n\n  componentWillMount () {\n    this.document.body.setAttribute('scheme', this.props.scheme);\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.scheme !== this.props.scheme) {\n      this.document.body.setAttribute('scheme', nextProps.scheme);\n    }\n  }\n\n  getChildContext () {\n    return {\n      isWebView: this.props.isWebView,\n      webviewType: this.props.webviewType,\n      scheme: this.props.scheme,\n      app: this.props.app\n    };\n  }\n\n  render () {\n    return this.props.children;\n  }\n}\n"],"file":"ConfigProvider.js"}