"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _getClassName = _interopRequireDefault(require("../../helpers/getClassName"));

var _classNames = _interopRequireDefault(require("../../lib/classNames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var masksCreated = false;

function createMasks() {
  if (masksCreated) return;
  var svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  svgElement.setAttributeNS(null, 'id', '__SVG_MASKS_NODE__');
  svgElement.setAttributeNS(null, 'width', 0);
  svgElement.setAttributeNS(null, 'height', 0);
  svgElement.style.position = 'absolute';
  svgElement.style.width = 0;
  svgElement.style.height = 0;
  svgElement.innerHTML = "<defs>\n  <clipPath id=\"users_stack_mask_24_left\">\n    <path d=\"M3.9971785,12 C3.9971785,9.49005736 3.33667467,7.13438366 2.18,5.09731189 C4.35181237,2.01417617 7.93927741,0 11.9971785,0 C18.6245955,0 23.9971785,5.372583 23.9971785,12 C23.9971785,18.627417 18.6245955,24 11.9971785,24 C7.93927741,24 4.35181237,21.9858238 2.18,18.9026881 C3.33667467,16.8656163 3.9971785,14.5099426 3.9971785,12 Z\"></path>\n  </clipPath>\n\n  <clipPath id=\"users_stack_mask_24_right\">\n    <path d=\"M21.8171785,5.09731189 C20.6605038,7.13438366 20,9.49005736 20,12 C20,14.5099426 20.6605038,16.8656163 21.8171785,18.9026881 C19.6453661,21.9858238 16.0579011,24 12,24 C5.372583,24 3.90798505e-14,18.627417 3.90798505e-14,12 C3.90798505e-14,5.372583 5.372583,0 12,0 C16.0579011,0 19.6453661,2.01417617 21.8171785,5.09731189 Z\"></path>\n  </clipPath>\n\n  <clipPath id=\"users_stack_mask_32_left\">\n    <path d=\"M2.13430019,23.9892466 C3.32858917,21.5820026 4,18.8694095 4,16 C4,13.1305905 3.32858917,10.4179974 2.13430019,8.0107534 C4.89924175,3.22241289 10.0733034,-2.30926389e-14 16,-2.30926389e-14 C24.836556,-2.30926389e-14 32,7.163444 32,16 C32,24.836556 24.836556,32 16,32 C10.0733034,32 4.89924175,28.7775871 2.13430019,23.9892466 L2.13430019,23.9892466 Z\"></path>\n  </clipPath>\n\n  <clipPath id=\"users_stack_mask_32_right\">\n    <path d=\"M29.8656998,8.0107534 C28.6714108,10.4179974 28,13.1305905 28,16 C28,18.8694095 28.6714108,21.5820026 29.8656998,23.9892466 C27.1007583,28.7775871 21.9266966,32 16,32 C7.163444,32 3.90798505e-14,24.836556 3.90798505e-14,16 C3.90798505e-14,7.163444 7.163444,0 16,0 C21.9266966,0 27.1007583,3.22241289 29.8656998,8.0107534 Z\"></path>\n  </clipPath>\n</defs>";
  document.body.appendChild(svgElement);
  masksCreated = true;
}

createMasks();
var baseClassName = (0, _getClassName.default)('UsersStack');

function UsersStack(props) {
  var className = props.className,
      photos = props.photos,
      count = props.count,
      size = props.size,
      vertical = props.vertical,
      children = props.children,
      restProps = _objectWithoutProperties(props, ["className", "photos", "count", "size", "vertical", "children"]);

  var othersCount = Math.max(0, photos.length - count);
  var canShowOthers = othersCount > 0 && size === 'm';
  var photosShown = photos.slice(0, count);
  return _react.default.createElement("div", _extends({}, restProps, {
    className: (0, _classNames.default)(baseClassName, className, 'UsersStack--size-' + size, {
      'UsersStack--with-others': canShowOthers,
      'UsersStack--v': vertical
    })
  }), _react.default.createElement("div", {
    className: "UsersStack__photos"
  }, photosShown.map(function (photo, i) {
    return _react.default.createElement("div", {
      key: i,
      className: "UsersStack__photo",
      style: {
        backgroundImage: "url(".concat(photo, ")")
      }
    });
  }), canShowOthers && _react.default.createElement("div", {
    className: "UsersStack__photo UsersStack__photo--others"
  }, "+".concat(othersCount))), _react.default.createElement("div", {
    className: "UsersStack__text"
  }, children));
}

UsersStack.propTypes = {
  /**
   * Массив ссылок на фотографии
   */
  photos: _propTypes.default.arrayOf(_propTypes.default.string),

  /**
   * Размер аватарок
   */
  size: _propTypes.default.oneOf(['s', 'm']),

  /**
   * Вертикальный режим. Рекомендуется использовать с размером `m`
   */
  vertical: _propTypes.default.bool,

  /**
   * Количество аватарок, которые будут показаны.
   * Если в массиве `photos` больше элементов и используется размер `m`, то будет показано количество остальных элементов
   */
  count: _propTypes.default.number,

  /**
   * Текст, например, `Иван и ещё 2 ваших друга подписаны`
   */
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  style: _propTypes.default.object
};
UsersStack.defaultProps = {
  photos: [],
  size: 's',
  count: 3
};

var _default = _react.default.memo(UsersStack);

exports.default = _default;
//# sourceMappingURL=UsersStack.js.map