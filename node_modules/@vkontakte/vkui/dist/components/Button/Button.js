"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _Tappable = _interopRequireDefault(require("../Tappable/Tappable"));

var _getClassName = _interopRequireDefault(require("../../helpers/getClassName"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classNames2 = _interopRequireDefault(require("../../lib/classNames"));

var _CellButton = _interopRequireDefault(require("../CellButton/CellButton"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var baseClassName = (0, _getClassName.default)('Button');

var mapOldLevel = function mapOldLevel(level) {
  switch (level) {
    case '1':
      return 'primary';

    case '2':
      return 'secondary';

    case '3':
      return 'tertiary';

    case 'sell':
      return 'outline';

    case 'buy':
      return 'commerce';

    default:
      return level;
  }
};

var Button = function Button(props) {
  if (props.type === 'cell') {
    return _react.default.createElement(_CellButton.default, props);
  } else {
    var _classNames;

    var className = props.className,
        size = props.size,
        level = props.level,
        stretched = props.stretched,
        align = props.align,
        children = props.children,
        before = props.before,
        after = props.after,
        type = props.type,
        restProps = _objectWithoutProperties(props, ["className", "size", "level", "stretched", "align", "children", "before", "after", "type"]);

    return _react.default.createElement(_Tappable.default, _extends({}, restProps, {
      className: (0, _classNames2.default)(baseClassName, className, (_classNames = {}, _defineProperty(_classNames, "Button--sz-".concat(size), true), _defineProperty(_classNames, "Button--lvl-".concat(mapOldLevel(level)), true), _defineProperty(_classNames, "Button--aln-".concat(align || 'center'), true), _defineProperty(_classNames, "Button--str", stretched), _classNames)),
      stopPropagation: true
    }), _react.default.createElement("div", {
      className: "Button__in"
    }, before && _react.default.createElement("div", {
      className: "Button__before"
    }, before), children && _react.default.createElement("div", {
      className: "Button__content"
    }, children), after && _react.default.createElement("div", {
      className: "Button__after"
    }, after)));
  }
};

Button.propTypes = {
  /**
   * Значения `1`, `2`, `3`, `sell`, `buy` устарели. Маппинг на новые значения находится в
   * статическом методе `Button.mapOldLevel(level)`. Старые значения будут удалены в 3.0.0
   */
  level: _propTypes.default.oneOf(['primary', 'secondary', 'tertiary', 'outline', 'commerce', '1', '2', '3', 'sell', 'buy']),
  size: _propTypes.default.oneOf(['m', 'l', 'xl']),

  /**
   * @deprecated Кнопки-ячейки `<Button type="cell" />` переехали в отдельный компонент: `<CellButton />`.
   * Свойство `type` будет удалено в 3.0.0
   */
  type: _propTypes.default.oneOf(['default', 'cell']),
  align: _propTypes.default.oneOf(['left', 'center', 'right']),
  stretched: _propTypes.default.bool,
  before: _propTypes.default.node,
  after: _propTypes.default.node,
  children: _propTypes.default.node,
  style: _propTypes.default.object,
  className: _propTypes.default.string,
  component: _propTypes.default.any
};
Button.defaultProps = {
  level: 'primary',
  type: 'default',
  component: 'button',
  size: 'm',
  stretched: false
};
var _default = Button;
exports.default = _default;
//# sourceMappingURL=Button.js.map