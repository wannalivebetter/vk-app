"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classNames2 = _interopRequireDefault(require("../../lib/classNames"));

var _getClassName = _interopRequireDefault(require("../../helpers/getClassName"));

var _Tappable = _interopRequireDefault(require("../Tappable/Tappable"));

var _Touch = _interopRequireDefault(require("../Touch/Touch"));

var _platform = require("../../lib/platform");

var _chevron = _interopRequireDefault(require("@vkontakte/icons/dist/24/chevron"));

var _done = _interopRequireDefault(require("@vkontakte/icons/dist/16/done"));

var _cancel = _interopRequireDefault(require("@vkontakte/icons/dist/24/cancel"));

var _reorder = _interopRequireDefault(require("@vkontakte/icons/dist/24/reorder"));

var _reorder_ios = _interopRequireDefault(require("@vkontakte/icons/dist/24/reorder_ios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var baseClassNames = (0, _getClassName.default)('Cell');

var Cell =
/*#__PURE__*/
function (_Component) {
  _inherits(Cell, _Component);

  function Cell() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Cell);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Cell)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      isRemoveActivated: false,
      removeOffset: 0,
      dragging: false
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onClick", function (e) {
      var _this$props = _this.props,
          removable = _this$props.removable,
          onClick = _this$props.onClick;

      if (e.target.tagName.toLowerCase() === 'input') {
        e.stopPropagation();
      } else if (removable) {
        return null;
      } else {
        onClick && onClick(e);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "activateRemove", function () {
      _this.setState({
        isRemoveActivated: true
      });

      _this.document.addEventListener('click', _this.deactivateRemove);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "deactivateRemove", function () {
      _this.setState({
        isRemoveActivated: false,
        removeOffset: 0
      });

      _this.document.removeEventListener('click', _this.deactivateRemove);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onRemoveClick", function (e) {
      e.nativeEvent.stopImmediatePropagation();
      e.preventDefault();
      _this.props.onRemove && _this.props.onRemove(e, _this.rootEl);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getRemoveRef", function (el) {
      return _this.removeButton = el;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getRootRef", function (element) {
      _this.rootEl = element;
      var getRootRef = _this.props.getRootRef;

      if (getRootRef) {
        if (typeof getRootRef === 'function') {
          getRootRef(element);
        } else {
          getRootRef.current = element;
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onDragStart", function () {
      _this.setState({
        dragging: true
      });

      _this.dragShift = 0;
      _this.listEl = _this.rootEl.closest('.List');
      _this.listEl && _this.listEl.classList.add('List--dragging');
      _this.siblings = Array.prototype.slice.call(_this.rootEl.parentElement.childNodes);
      _this.dragStartIndex = _this.siblings.indexOf(_this.rootEl);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onDragMove", function (e) {
      e.originalEvent.preventDefault();
      if (_this.state.removeOffset) return;
      _this.rootEl.style.transform = "translateY(".concat(e.shiftY, "px)");

      var rootGesture = _this.rootEl.getBoundingClientRect();

      _this.dragDirection = _this.dragShift - e.shiftY < 0 ? 'down' : 'up';
      _this.dragShift = e.shiftY;
      _this.dragEndIndex = _this.dragStartIndex;

      _this.siblings.forEach(function (sibling, siblingIndex) {
        var siblingGesture = sibling.getBoundingClientRect();

        if (_this.dragStartIndex < siblingIndex) {
          if (rootGesture.bottom > siblingGesture.top + siblingGesture.height / 2) {
            if (_this.dragDirection === 'down') sibling.style.transform = "translateY(-100%)";
            _this.dragEndIndex++;
          }

          if (rootGesture.top < siblingGesture.bottom - siblingGesture.height / 2 && _this.dragDirection === 'up') {
            sibling.style.transform = "translateY(0)";
          }
        } else if (_this.dragStartIndex > siblingIndex) {
          if (rootGesture.top < siblingGesture.bottom - siblingGesture.height / 2) {
            if (_this.dragDirection === 'up') sibling.style.transform = "translateY(100%)";
            _this.dragEndIndex--;
          }

          if (rootGesture.bottom > siblingGesture.top + siblingGesture.height / 2 && _this.dragDirection === 'down') {
            sibling.style.transform = "translateY(0)";
          }
        }
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onDragEnd", function () {
      _this.setState({
        dragging: false
      });

      _this.listEl && _this.listEl.classList.remove('List--dragging');
      _this.props.onDragFinish && _this.props.onDragFinish({
        from: _this.dragStartIndex,
        to: _this.dragEndIndex
      });

      _this.siblings.forEach(function (sibling) {
        return sibling.style.transform = null;
      });

      delete _this.dragShift;
      delete _this.listEl;
      delete _this.siblings;
      delete _this.dragStartIndex;
      delete _this.dragEndIndex;
      delete _this.dragDirection;
    });

    return _this;
  }

  _createClass(Cell, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.document.removeEventListener('click', this.deactivateRemove);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevState.isRemoveActivated !== this.state.isRemoveActivated && this.state.isRemoveActivated) {
        this.setState({
          removeOffset: this.removeButton.offsetWidth
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props2 = this.props,
          before = _this$props2.before,
          indicator = _this$props2.indicator,
          asideContent = _this$props2.asideContent,
          expandable = _this$props2.expandable,
          onClick = _this$props2.onClick,
          children = _this$props2.children,
          getRootRef = _this$props2.getRootRef,
          description = _this$props2.description,
          selectable = _this$props2.selectable,
          multiline = _this$props2.multiline,
          className = _this$props2.className,
          onRemove = _this$props2.onRemove,
          removable = _this$props2.removable,
          removePlaceholder = _this$props2.removePlaceholder,
          draggable = _this$props2.draggable,
          onDragFinish = _this$props2.onDragFinish,
          href = _this$props2.href,
          size = _this$props2.size,
          bottomContent = _this$props2.bottomContent,
          restProps = _objectWithoutProperties(_this$props2, ["before", "indicator", "asideContent", "expandable", "onClick", "children", "getRootRef", "description", "selectable", "multiline", "className", "onRemove", "removable", "removePlaceholder", "draggable", "onDragFinish", "href", "size", "bottomContent"]);

      selectable = selectable && !draggable;
      var rootProps = selectable ? {} : restProps;
      var inputProps = selectable ? restProps : {};
      var linkProps = href ? restProps : {};
      return _react.default.createElement("div", _extends({}, rootProps, {
        onClick: href || draggable ? null : this.onClick,
        className: (0, _classNames2.default)(baseClassNames, (_classNames = {
          'Cell--expandable': expandable,
          'Cell--multiline': multiline
        }, _defineProperty(_classNames, "Cell--".concat(size), size), _defineProperty(_classNames, 'Cell--dragging', this.state.dragging), _defineProperty(_classNames, 'Cell--draggable', draggable), _classNames), className),
        ref: this.getRootRef
      }), _react.default.createElement(_Tappable.default, _extends({}, linkProps, {
        onClick: href ? this.onClick : null,
        component: selectable ? 'label' : href ? 'a' : 'div',
        className: "Cell__in",
        href: href,
        disabled: !selectable && !onClick && !href || removable || draggable,
        style: removable ? {
          transform: "translateX(-".concat(this.state.removeOffset, "px)")
        } : null
      }), selectable && _react.default.createElement("input", _extends({}, inputProps, {
        type: "checkbox",
        className: "Cell__checkbox"
      })), _react.default.createElement("div", {
        className: "Cell__before"
      }, selectable && _platform.IS_PLATFORM_IOS && _react.default.createElement("div", {
        className: "Cell__checkbox-marker"
      }, _react.default.createElement(_done.default, null)), removable && _platform.IS_PLATFORM_IOS && _react.default.createElement("div", {
        className: "Cell__remove-marker",
        onClick: this.activateRemove
      }), _platform.IS_PLATFORM_ANDROID && draggable && _react.default.createElement(_Touch.default, {
        onStart: this.onDragStart,
        onMoveY: this.onDragMove,
        onEnd: this.onDragEnd,
        className: "Cell__dragger"
      }, _react.default.createElement(_reorder.default, null)), before && _react.default.createElement("div", {
        className: "Cell__before-in"
      }, before)), _react.default.createElement("div", {
        className: "Cell__main"
      }, _react.default.createElement("div", {
        className: "Cell__children"
      }, children), description && _react.default.createElement("div", {
        className: "Cell__description"
      }, description), size === 'l' && bottomContent && _react.default.createElement("div", {
        className: "Cell__bottom"
      }, bottomContent)), _react.default.createElement("div", {
        className: "Cell__indicator"
      }, indicator), _react.default.createElement("div", {
        className: "Cell__aside"
      }, asideContent, selectable && _platform.IS_PLATFORM_ANDROID && _react.default.createElement("div", {
        className: "Cell__checkbox-marker"
      }, _react.default.createElement(_done.default, null)), removable && _platform.IS_PLATFORM_ANDROID && _react.default.createElement("div", {
        className: "Cell__remove-marker",
        onClick: this.onRemoveClick
      }, _react.default.createElement(_cancel.default, null)), _platform.IS_PLATFORM_IOS && expandable && !draggable && _react.default.createElement(_chevron.default, {
        className: "Cell__chevron"
      }), _platform.IS_PLATFORM_IOS && draggable && _react.default.createElement(_Touch.default, {
        className: "Cell__dragger",
        onStart: this.onDragStart,
        onMoveY: this.onDragMove,
        onEnd: this.onDragEnd
      }, _react.default.createElement(_reorder_ios.default, null)))), removable && _platform.IS_PLATFORM_IOS && _react.default.createElement("div", {
        ref: this.getRemoveRef,
        className: "Cell__remove",
        onClick: this.onRemoveClick,
        style: removable ? {
          transform: "translateX(-".concat(this.state.removeOffset, "px)")
        } : null
      }, _react.default.createElement("span", {
        className: "Cell__remove-in"
      }, removePlaceholder)));
    }
  }, {
    key: "document",
    get: function get() {
      return this.context.document || document;
    }
    /**
     * предотвращает двойное срабатывание в случае с input
     * (https://github.com/vuejs/vue/issues/3699#issuecomment-247957931)
     * предотвращает клик в случае, когда включен режим removable
     * @param e
     */

  }]);

  return Cell;
}(_react.Component);

exports.default = Cell;

_defineProperty(Cell, "propTypes", {
  /**
   * Контейнер для контента от `children`.
   */
  before: _propTypes.default.node,

  /**
   * Контейнер для текста справа от `children`.
   */
  indicator: _propTypes.default.node,

  /**
   * Контейнер для контента справа от `children` и `indicator`.
   */
  asideContent: _propTypes.default.node,

  /**
   * Выставляйте этот флаг, если клик по ячейке вызывает переход на другую панель. Флаг нужен для корректной
   * стилизации такой ячейки.
   */
  expandable: _propTypes.default.bool,
  children: _propTypes.default.node,
  onClick: _propTypes.default.func,

  /**
   * Добавляет возможность переноса содержимого `children` и `description`. Без этого флага текст будет уходить
   * в троеточие.
   */
  multiline: _propTypes.default.bool,

  /**
   * Контейнер для дополнительного содержимого под `children`.
   */
  description: _propTypes.default.node,
  getRootRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
    current: _propTypes.default.instanceOf(Element)
  })]),

  /**
   * Контейнер для произвольного содержимого под `description`. Рисуется только если передать `size="l"`.
   */
  bottomContent: _propTypes.default.node,
  className: _propTypes.default.string,
  style: _propTypes.default.object,

  /**
   * Размер влияет на выравнивание блоков по вертикали, вид сепаратора (iOS) и возможность вставлять `bottomContent`.
   */
  size: _propTypes.default.oneOf(['m', 'l']),

  /**
   * Флаг для перехода в режим ячеек-чекбоксов.
   * **Важно:** в этом режиме обработчик `onClick` вызываться не будет.
   * **Важно:** этот режим несовместим с `draggable`. В случае истинности двух этих флагов, приоритет отдается
   * `draggable`.
   */
  selectable: _propTypes.default.bool,

  /**
   * Флаг для перехода в режим удаляемых ячеек. **Важно:** в этом режиме обработчик `onClick` вызываться не будет.
   */
  removable: _propTypes.default.bool,

  /**
   * Коллбэк срабатывает при клике на контрол удаления.
   */
  onRemove: _propTypes.default.func,

  /**
   * iOS only. Текст в выезжаеющей кнопке для удаления ячейки.
   */
  removePlaceholder: _propTypes.default.node,

  /**
   * Флаг для перехода в режим перетаскивания. **Важно:** в этом режиме обработчик `onClick` вызываться не будет.
   */
  draggable: _propTypes.default.bool,

  /**
   * Коллбэк срабатывает при завершении перетаскивания.
   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.
   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице
   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.
   */
  onDragFinish: _propTypes.default.func,

  /**
   * При передаче `href`, ячейка становится полноценной ссылкой. Поддерживаются все валидные для этого элемента
   * атрибуты (`target`, `rel` и т.д.).
   */
  href: _propTypes.default.string
});

_defineProperty(Cell, "defaultProps", {
  before: null,
  indicator: '',
  asideContent: '',
  bottomContent: null,
  expandable: false,
  children: '',
  selectable: false,
  multiline: false,
  removable: false,
  size: 'm',
  removePlaceholder: 'Удалить'
});

_defineProperty(Cell, "contextTypes", {
  document: _propTypes.default.any
});
//# sourceMappingURL=Cell.js.map